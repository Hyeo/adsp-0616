age <- 30
word <- '고등어'
word2 <- "갈치"
3word <- "꽁치"
age + 30
word4 <- 'hello'
age + 30
score + 20
kor_score <- 50
eng_score <- 100
kor_score + 20
kor_score <- kor_score + 20
bank.account <- 1000000
bank account <- 1000000
bank.account <- 1000000
bank_account <- 1000000
deposit <- 10000
bank.account - deposit
bank.account <- bank.account - deposit
n <- 2.2
i <- 5
t <- TRUE
f <- FALSE
sentence <- 'Hello World!'
class(n)
class(i)
class(t)
class(f)
class(sentence)
is.numeric(n)
is.integer(n)
is.integer(i)
is.double(n)
is.double(i)
int <- 5L
is.double(int)
is.integer(int)
a <- 11
b <- 7
Area <- a * b
Area
Perimeter <- 2 * ( a + b)
Perimeter
a <- 22
x <- 11
x %% 2
x <- 12
x %% 2
x <- 12
x %% 2
x <- 12
x <- 12
x %% 2
a <- 20
area <- 6 * a ** 2
area
area <- 6 * a ^ 2
area
volume <- a ^ 3
volume
setwd("~/GitHub/adsp-0616/part01")
#Data
# 2019년 1월 부터 12월까지의 수입과 지출 데이터 입니다.
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
#각 월별 수익을 계산하세요.
profit <- revenue - expenses
profit
# 세금은 수익의 30% 입니다.
# 따라서 각 월별, 세금을 구하세요.
# round 함수를 이용해서 소수점 2 자리까지 표현하세요.
?round
tax <- profit * 0.3
tax <- round(tax, digits = 2)
tax
profit.after.tax <- profit - tax
profit.after.tax <- profit - tax
profit.margin <- profit.after.tax / revenue * 100
profit.margin <- round(profit.margin , digits = 2)
mean.profit.after.tax <- mean(profit.after.tax)
mean.profit.after.tax
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
profit.after.tax > mean.profit.after.tax
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
filter <- profit.after.tax > mean.profit.after.tax
filter
profit.after.tax[filter]
names(profit.after.tax) <- 1:12
profit.after.tax
profit.after.tax[filter]
# 반대로, 평균수익 이상 내지 못한 월들을 찾으세요.
new_filter <- !filter
new_filter
filter
profit.after.tax[new_filter]
# 세후 수익이 가장 좋은 달은 몇월입니까?
profit.after.tax
# 세후 수익이 가장 좋은 달은 몇월입니까?
max(profit.after.tax)
profit.after.tax == 8140.78
profit.after.tax == 8140.68
profit.after.tax[  profit.after.tax == 8140.68 ]
profit.after.tax[ profit.after.tax == max(profit.after.tax)]
# 세후 수익이 가장 나쁜달은 몇월입니까?
profit.after.tax == min(profit.after.tax)
# 세후 수익이 가장 나쁜달은 몇월입니까?
filter <- profit.after.tax == min(profit.after.tax)
profit.after.tax[filter]
setwd("~/GitHub/adsp-0616/part02")
setwd("~/GitHub/adsp-0616/part02")
setwd("~/GitHub/adsp-0616/part02")
v <- 1:10
v
matrix(v)
matrix(v)
matrix(v, nrow = 2 )
matrix(v, norw = 2, byrow = FALSE)
matrix(v, nrow = 2, byrow = FALSE)
matrix(v, nrow = 2, byrow = TRUE)
goog <- c(450, 451, 452, 445, 468)
msft <- c(230, 231, 232, 236, 228)
c( goog, msft  )
stocks <- c( goog, msft  )
stocks
matrix(stocks)
matrix(stocks, nrow = 2)
matrix(stocks, nrow = 2, byrow = TRUE)
stock.matrix <- matrix(stocks, nrow = 2, byrow = TRUE)
stock.matrix
stock.matrix
stock.matrix
stock.matrix
days <- c('Mon','Tue','Wed','Thu','Fri')
company <- c('GOOG','MSFT')
rownames(stock.matrix) <- company
stock.matrix
colnames(stock.matrix) <- days
stock.matrix
mat <- matrix(1:50, nrow = 5, byrow = TRUE)
mat
mat * 2
3 * mat
1 / mat
mat ^ 2
mat > 17
mat > 17
mat + mat
mat / mat
mat * mat
mat2 <- matrix(1:9 , nrow=3)
mat2
mat2 %*% mat2
stock.matrix
v
v
v
v
sum(v)
mean(v)
max(v)
min(v)
sum(stock.matrix)
mean(stock.matrix)
max(stock.matrix)
min(stock.matrix)
stock.matrix
colSums(stock.matrix)
rowSums(stock.matrix)
colMeans(stock.matrix)
rowMeans(stock.matrix)
colMins(stock.matrix)
FB <- c(111,112,113,120,145)
stock.matrix
rbind(stock.matrix, FB)
stock.matrix <- rbind(stock.matrix, FB)
stock.matrix
rowMeans(stock.matrix)
avg <- rowMeans(stock.matrix)
cbind(stock.matrix, avg)
stock.matrix <- cbind(stock.matrix, avg)
stock.matrix
mat <- matrix(1:50, nrow = 5, byrow = TRUE)
mat
mat[ 1, ]
mat[ , 1]
mat[ 2, 5]
# 2행부터 4행까지 데이터를 가져오세요.
# 2 ~ 4 => 2:4
mat[ 2:4 ,  ]
mat[ 2:4 , 4:7]
mat
mat
\
mat[ 3, 4]
mat[ 3, 4] <- 100
mat
install.packages('Rfast')
library(Rfast)
rowMaxs(mat)
colMins(mat)
rowMaxs(stock.matrix)
stock.matrix
rowMaxs(stock.matrix)
# 1. 다음 2개의 벡터를 만듭니다.
#    A 는 1,2,3
#    B 는 4,5,6
A <- c(1,2,3)
B <- c(4,5,6)
a
A
B
# 2. 위의 2개 벡터를 행으로 쌓는 매트릭스(행렬)로 만드세요.
rbind(A, B)
rbind(B, A)
mat <- matrix(1:9, nrow = 3, byrow = T)
mat
# 4. 위의 mat가 행렬인지 확인하는 코드를 작성.
is.matrix(mat)
# 5. 1~25까지 행으로 연속된 5X5 행렬, mat2를 만드세요.
mat2 <-  matrix(1:25, nrow = 5)
mat2
# 5. 1~25까지 행으로 연속된 5X5 행렬, mat2를 만드세요.
mat2 <-  matrix(1:25, nrow = 5, byrow = T)
mat2
mat2[ 2:3 , 2:3 ]
# 7. mat2 행렬에서 다음처럼 필요한 부분만 가져오세요.
#   [19,20]
#   [24,25]
mat2[4:5, 4:5]
# 8. 모든원소의 합은?
sum(mat2)
# 9. runif() 함수를 찾아보고, 랜덤 유니폼
?runif
help(runif)
??runif
# 9. runif() 함수를 찾아보고, 랜덤 유니폼
?runif
runif(10, 0, 10)
runif(10, min = 0, max = 10)
runif(10, min = 0, max = 1)
matrix( runif(20, min = 0, max = 100) , nrow = 4 )
'hello'
print('hello')
a <- 'hello'
b <- 'world'
paste(a, b)
c <- 'welcome'
paste(b, a, c)
paste(a, b, b, c, a, c, b)
paste(a, b)
paste(a, b, sep = '~~')
paste(a, b, c, sep = '!! ')
paste0(a, b, c)
source('~/GitHub/adsp-0616/part02/01_BasketballData.R', encoding = 'UTF-8', echo=TRUE)
View(FieldGoalAttempts)
View(FieldGoals)
View(Games)
View(MinutesPlayed)
View(MinutesPlayed)
View(Points)
View(Salary)
View(FieldGoalAttempts)
View(FieldGoals)
View(FieldGoals)
Games
Games
rownames(Games)
colnames(Games)
# 르브론제임스가 2012년도에 몇게임 뛰었는가
Games[  "LeBronJames" , "2012" ]
# 1게임당 몇점 넣었는지 행렬로 나타내시오. (모든선수, 모든년도)
Points
# 1게임당 몇점 넣었는지 행렬로 나타내시오. (모든선수, 모든년도)
Points / Games
# 1게임당 몇점 넣었는지 행렬로 나타내시오. (모든선수, 모든년도)
round( Points / Games , 1)
# 1게임당 몇점 넣었는지 행렬로 나타내시오. (모든선수, 모든년도)
Points / Games
round(Points / Games, 1)
# 1게임당 몇분 뛰었는가???
MinutesPlayed
# 1게임당 몇분 뛰었는가???
MinutesPlayed / Games
round(MinutesPlayed / Games, 1)
Min.per.Game <- round(MinutesPlayed / Games, 1)
# 1게임당 평균 몇분 뛰었는지 계산.
Min.per.Game
Avg <- rowmeans(Min.per.Game)
Avg
cbind(Min.per.Game, Avg)
cbind(Min.per.Game, Avg)
Min.per.Game <- cbind(Min.per.Game, Avg)
Min.per.Game[ c('KobeBryant', 'ChrisBosh', 'LeBronJames') ,   ]
