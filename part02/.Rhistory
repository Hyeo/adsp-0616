age <- 30
word <- '고등어'
word2 <- "갈치"
3word <- "꽁치"
age + 30
word4 <- 'hello'
age + 30
score + 20
kor_score <- 50
eng_score <- 100
kor_score + 20
kor_score <- kor_score + 20
bank.account <- 1000000
bank account <- 1000000
bank.account <- 1000000
bank_account <- 1000000
deposit <- 10000
bank.account - deposit
bank.account <- bank.account - deposit
n <- 2.2
i <- 5
t <- TRUE
f <- FALSE
sentence <- 'Hello World!'
class(n)
class(i)
class(t)
class(f)
class(sentence)
is.numeric(n)
is.integer(n)
is.integer(i)
is.double(n)
is.double(i)
int <- 5L
is.double(int)
is.integer(int)
a <- 11
b <- 7
Area <- a * b
Area
Perimeter <- 2 * ( a + b)
Perimeter
a <- 22
x <- 11
x %% 2
x <- 12
x %% 2
x <- 12
x %% 2
x <- 12
x <- 12
x %% 2
a <- 20
area <- 6 * a ** 2
area
area <- 6 * a ^ 2
area
volume <- a ^ 3
volume
myplot <- function(z, who=1:10) {
matplot(t(z[who,,drop=F]), type="b", pch=15:18, col=c(1:4,6), main="Basketball Players Analysis")
legend("bottomleft", inset=0.01, legend=Players[who], col=c(1:4,6), pch=15:18, horiz=F)
}
# 다음처럼 비주얼라이징 할수 있음을 확인하시고, 아래 문제를 풀겠습니다.
myplot(FreeThrows)
source('~/GitHub/radsp/week02/03_ex_FreeThrowSData.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/radsp/week02/04_ex_FreeThrows.R', encoding = 'UTF-8', echo=TRUE)
myplot <- function(z, who=1:10) {
matplot(t(z[who,,drop=F]), type="b", pch=15:18, col=c(1:4,6), main="Basketball Players Analysis")
legend("bottomleft", inset=0.01, legend=Players[who], col=c(1:4,6), pch=15:18, horiz=F)
}
# 다음처럼 비주얼라이징 할수 있음을 확인하시고, 아래 문제를 풀겠습니다.
myplot(FreeThrows)
FreeThrows /FreeThrowAttempts
myplot( FreeThrows /FreeThrowAttempts )
animal <- c('dog', 'cat','hen','dog','dog','cat')
height <- c('low', 'medium', 'low', 'high')
price <- c(1122, 3012, 9, 20, 333)
sotck <- c(102.34, 98, 97.123, 169.345)
year <- c(2016, 2017, 2016, 2018, 2015, 2016)
factor(animal)
ani.factor <- factor(animal)
ani.factor
factor(height)
summary(animal)
summary(stock)
stock <- c(102.34, 98, 97.123, 169.345)
summary(stock)
state.x77
women
states <- state.x77
View(states)
is.data.frame(states)
as.data.frame(states)
states <- as.data.frame(states)
is.data.frame(states)
head(states)
head(states)
head(states)
tail(states)
head(states, 10)
tail(states, 2)
summary(states)
str(states)
days <- c('월','화','수','목','금')
temp <- c(22, 23, 21, 20, 19)
rain <- c(T, F, F, T, F)
df <- data.frame(days, temp, rain)
df
is.data.frame(df)
df
df[ 2, ]
df[ , 'rain']
df
str(df)
df$rain
# 온도가 21도 이상인 데이터를 가져오시오.
df$temp >= 21
# 온도가 21도 이상인 데이터를 가져오시오.
filter <- df$temp >= 21
df[ filter  ,   ]
# 온도가 21도 이상인 데이터에서, days와 temp만 가져오시오.
filter <- df$temp >= 21
df[ filter  ,   ]
df[ filter  , 1:2  ]
df[ filter  , c('days','temp')  ]
subset(df, subset = temp >= 21)
# 비가 온 날의 데이터를 가져오시오.
df[ df$rain == TRUE ,   ]
# 비가 온 날의 데이터를 가져오시오.
filter <- df$rain == TRUE
df[ filter ,   ]
subset(df, rain == TRUE)
df$temp >= 21 & df$rain == T
filter <- df$temp >= 21 & df$rain == T
df[ filter   ,   ]
# 온도가 21도 이상이거나, 비가 온날의 데이터를 가져오시오.
filter <- df$temp >= 21 | df$rain == T
df[ filter,   ]
# 온도가 21도 이상 22도 이하인 날의 데이터를 가져오시오.
filter <- df$temp >= 21  &  df$temp <= 22
df[ filter, ]
# 온도가 큰것부터 데이터를 가져오시오.
order(df$temp)
# 온도가 큰것부터 데이터를 가져오시오.
order.temp <- order(df$temp)
df[ c(3,1) ,  ]
df[ order.temp ,  ]
# 온도가 큰것부터 데이터를 가져오시오.
order.temp <- order(-df$temp)
df[ order.temp ,  ]
# 오름차순을 -를 붙이지 않습니다.
order.temp <- order(df$temp)
df[ order.temp ,  ]
order.days <- order(-df$days)
order.days <- order(df$days)
df[ order.days ,  ]
order.days <- order(-df['days'])
order.days <- order(-df['temps'])
order.days <- order(-df['temp'])
df[ order.days ,  ]
order.days <- order(df$days)
df[ order.days ,  ]
source('~/GitHub/adsp-0616/part02/08_dataset_Merging.R', echo=TRUE)
head(authors)
head(books)
merge(authors, books, by.x = 'surname', by.y = 'name' )
setwd("~/GitHub/adsp-0616")
source('~/GitHub/adsp-0616/part02/01_BasketballData.R', encoding = 'UTF-8', echo=TRUE)
Games
animal <- c('dog', 'dog', 'cat', 'dog','cat','dog')
factor(animal)
length(animal)
animal <- factor(animal)
animal
state.x77
pi
df <- state.x77
is.data.frame(df)
df <- as.data.frame(df)
is.data.frame(df)
head(df)
head(df, 10)
tail(df)
tail(df, 8)
summary(df)
str(df)
# 데이터 프레임을 만들기.
days <- c('mon', 'tue', 'wed', 'thu','fri')
temp <- c(22, 23 , 21.5, 19, 24 )
rain <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
data.frame(days, temp, rain)
df <- data.frame(days, temp, rain)
is.data.frame(df)
head(df)
summary(df)
str(df)
df[2 , ]
df[2 ,  'temp']
df
df[  , 'rain' ]
df$rain
# 화요일, 목요일의 데이터를 가져오시오.
df[ c(2,4),   ]
# days컬럼과 rain컬럼의 데이터만 가져오시오.
df[  ,  c('days','rain')]
# 화수목 데이터를 가져오시오.
df[2:4 , ]
# 화수목의 온도와 비온유무에 대한 데이터만 가져오시오.
df[ 2:4   ,  c('temp','rain')  ]
# 온도가 22도 이상인 날의 데이터만 가져오시오.
filter <- df$temp >= 22
df[ filter  ,   ]
# 온도가 23도 이상이고 비가 온날의 데이터만 가져오시오.
filter1 <- df$temp >= 23
filter2 <- df$rain == TRUE
df[ filter1 & filter2   ,    ]
flter <- df$temp >= 23 & df$rain == TRUE
filter <- df$temp >= 23 & df$rain == TRUE
df[ filter , ]
df[ df$temp >= 23 & df$rain == TRUE , ]
setwd("~/GitHub/adsp-0616/part02")
subset(df, subset = temp >= 23 )
subset(df, temp >= 23)
subset(df, subset = temp >= 23 & rain == TRUE)
order(df$temp)
row.index <- order(df$temp)
df[ row.index  ,   ]
df
df[ c(4,3,1,2,5)  ,   ]
df[ 1  ,   ]
df[ 4  ,   ]
df[ c(4,3,1,2,5)  ,   ]
df[ row.index  ,   ]
df
order(-df$temp)
row.rev.index <- order(-df$temp)
df[ row.rev.index, ]
source('~/GitHub/adsp-0616/part02/08_dataset_Merging.R', echo=TRUE)
authors
books
is.data.frame(authors)
is.data.frame(books)
merge(authors, books, by.x = 'surname', by.y = 'name' )
merged.df <- merge(authors, books, by.x = 'surname', by.y = 'name' )
merged.df
source('~/GitHub/adsp-0616/part02/08_dataset_Merging.R', echo=TRUE)
authors
books
merge(authors, books, by = 'name')
empty <- data.frame()
c1 <- 1:10
letters
letters[ 1:10]
c2 <- letters[ 1:10]
df <- data.frame(col.name.1 = c1, col.name.2 = c2)
df
df2 <- data.frame(c1, c2)
df2
df2 <- data.frame(num = c1, letter = c2)
df2
d2 <- read.csv('example.csv')
head(d2)
nrow(d2)
ncol(d2)
rownames(d2)
colnames(d2)
mtcars
cars <- mtcars
is.data.frame(cars)
head(cars)
tail(cars)
summary(cars)
str(cars)
cars$mpg
df2
new.data <- c(20, 'k')
new.data
rbind(df2, new.data)
new.data <- data.frame(num = 20, letter = 'k')
rbind(df2, new.data)
df2$new.col <- 101:111
df2$new.col <- 100:111
df2$new.col <- 101:110
df2
df2$ppp <- 1001:1010
df2
df2
colnames(df2)
colnames(df2)[4]
colnames(df2)[4] <- 'added.col'
df2
colnames(df2)
colnames(df2) <- c('col.1', 'col.2', 'col.3', 'col.4')
df2
df2[  6 ,   ]
df2[  -6 ,   ]
df2[  ,  -3 ]
is.na(df2)
any(is.na(df2))
colSums(is.na(df2))
Age <- (22, 25, 26)
Weight <- c(150, 165, 120)
Sex <- c("M","M", "F")
Age <- c(22, 25, 26)
Weight <- c(150, 165, 120)
Sex <- c("M","M", "F")
data.frame(Age, Weight, Sex)
df <- data.frame(Age, Weight, Sex)
rownames(df) <- c('Sam','Frank','Amy')
df
# 2. mtcars는 1974 Motor Trend US Megazine에 수록된 차량과 차량에 관련된 수치들이 기록된 자료이다.
# 이 데이터셋을 가져와서, 데이터프레임인지 확인하시오.
mtcars
is.data.frame(mtcars)
matrix(1:25)
matrix(1:25, nrow = 5)
mat <-  matrix(1:25, nrow = 5)
as.data.frame(mat)
df <-  as.data.frame(mat)
df
df <- mtcars
head(df)
df$mpg
# 6. mpg(마일 퍼 갤런)의 평규값을 구하세요.
df[ , 'mpg']
mean( df$mpg )
# 6. mpg(마일 퍼 갤런)의 평규값을 구하세요.
mean(  df[ , 'mpg'] )
mean( df$mpg )
# 7. 6 cylinders (cyl column)를 가진 데이터를 뽑아내세요.
head(df)
# 7. 6 cylinders (cyl column)를 가진 데이터를 뽑아내세요.
head(df)
filter <- df$cyl == 6
df[ filter  ,  ]
df[   ,  c('am','gear','carb')  ]
df$hp / df$wt
df$performance <- df$hp / df$wt
head(df)
df$performance <- round( df$performance , 2)
head(df)
# 11. hp가 100보다 크고 wt 가 2.5보다 큰 차량들에서,
# 이 차량들의 평균 연비(mpg)가 얼마인지 보여주세요.
filter <- df$hp > 100 & df$wt > 2.5
subset(df, hp > 100 & wt > 2.5)
df[ filter , ]
new.df <- df[ filter , ]
new.df2 <- subset(df, hp > 100 & wt > 2.5)
new.df$mpg
new.df2$mpg
df[ filter, 'mpg']
mean( df[ filter, 'mpg'] )
df[ 'Hornet Sportabout', 'mpg']
